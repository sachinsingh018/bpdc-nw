'use client';

import React, { useEffect, useState, useRef } from 'react';
import { motion } from 'framer-motion';
import { ArrowRight } from 'lucide-react';

const PLACEHOLDER_MESSAGES = [
    "Ask me about startups worldwide...",
    "Find me tech professionals in...",
    "Connect me with finance experts...",
    "Show me remote work opportunities...",
    "Find networking events in...",
    "Help me find mentors in...",
    "Search for investors in...",
    "Find job opportunities in...",
];

export const ChatInput = ({ onResponse }: { onResponse?: () => void }) => {
    const [input, setInput] = useState("");
    const [placeholder, setPlaceholder] = useState("Ask me anything...");
    const [index, setIndex] = useState(0);
    const [response, setResponse] = useState(""); // NEW
    const textareaRef = useRef<HTMLTextAreaElement>(null);
    const [loading, setLoading] = useState(false);

    useEffect(() => {
        const suggestions = [
            "Ask me about startups worldwide...",
            "Top companies in Fintech globally?",
            "Latest Startup News in Silicon Valley?",
        ];

        const interval = setInterval(() => {
            setIndex(prevIndex => {
                const nextIndex = (prevIndex + 1) % suggestions.length;
                setPlaceholder(suggestions[nextIndex]);
                return nextIndex;
            });
        }, 3000);

        return () => clearInterval(interval);
    }, []);

    useEffect(() => {
        if (textareaRef.current) {
            textareaRef.current.style.height = "auto";
            textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
        }
    }, [input]);

    const handleSend = async () => {
        const trimmed = input.trim();
        if (!trimmed || loading) return;

        setLoading(true);
        setResponse("Thinking... üîç");

        try {
            // Commented out API call
            /*
            const res = await fetch("https://api.perplexity.ai/chat/completions", {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${process.env.PERPLEXITY_API_KEY}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    model: "sonar",
                    messages: [
                        { role: "user", content: `${trimmed}. Answer in a single, clear sentence under 10 words. Do not include citations, references, or tags.` }
                    ],
                    max_tokens: 200
                })
            });

            const data = await res.json();
            const content = data?.choices?.[0]?.message?.content;

            if (content) {
                setResponse(content);
            } else {
                setResponse("Sorry, I couldn't find an answer. Try asking again.");
            }
            */

            // Mock response for demonstration
            setResponse("This is a sample response that would normally be generated by our AI. The actual response would be much more detailed and helpful based on your specific question.");

            onResponse?.();

        } catch (err) {
            console.error(err);
            setResponse("There was an error reaching the AI. Please try again.");
        }

        setLoading(false);
        // setInput("");
    };

    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSend();
        }
    };

    return (
        <motion.div
            className="relative max-w-5xl mx-auto space-y-4"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.8, duration: 0.6 }}
        >
            {/* Glow effect */}
            <div className="absolute inset-0 bg-gradient-to-r from-bits-golden-yellow-500/40 to-bits-white/40 rounded-3xl blur-2xl opacity-60 animate-pulse z-0"></div>

            {/* Input area */}
            <div className="relative z-10 flex flex-col sm:flex-row gap-4 p-4 sm:p-6 w-full border border-bits-golden-yellow-500/50 rounded-3xl shadow-2xl bg-white/90 dark:bg-black/80 text-black dark:text-white backdrop-blur-2xl hover:border-bits-golden-yellow-400/70 transition-all duration-300">
                <textarea
                    ref={textareaRef}
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    onKeyDown={handleKeyDown}
                    placeholder={placeholder}
                    rows={1}
                    className="w-full sm:flex-1 resize-none overflow-hidden p-3 min-w-0 bg-white/80 dark:bg-zinc-900/70 text-black dark:text-white  placeholder-zinc-400 border border-zinc-800/60 focus:outline-none focus:ring-2 focus:ring-bits-golden-yellow-500/60 focus:border-bits-golden-yellow-400/60 rounded-2xl backdrop-blur-xl transition-all duration-200 text-sm sm:text-base md:text-lg font-medium"
                    aria-label="Chat input"
                />

                <motion.button
                    onClick={handleSend}
                    disabled={!input.trim() || loading}
                    aria-disabled={!input.trim() || loading}
                    className={`px-6 py-3 text-sm font-semibold rounded-2xl transition-all duration-200 shadow-lg ${!input.trim() || loading
                        ? "bg-zinc-900/50 text-zinc-500 cursor-not-allowed"
                        : "bg-gradient-to-r from-bits-golden-yellow-500 to-bits-golden-yellow-600 hover:from-bits-golden-yellow-600 hover:to-bits-golden-yellow-700 text-white hover:shadow-bits-golden-yellow-500/30 hover:scale-105"
                        }`}
                    whileHover={!input.trim() || loading ? {} : { scale: 1.05 }}
                    whileTap={!input.trim() || loading ? {} : { scale: 0.98 }}
                >
                    <span className="flex items-center space-x-2">
                        <span>{loading ? "Sending..." : "Send"}</span>
                        {!loading && <ArrowRight size={16} />}
                    </span>
                </motion.button>
            </div>

            {response && (
                <>
                    <motion.div
                        initial={{ opacity: 0, y: 10, scale: 0.98 }}
                        animate={{ opacity: 1, y: 0, scale: 1 }}
                        transition={{ duration: 0.4, ease: "easeOut" }}
                        className="relative z-10 px-6 py-5 rounded-2xl bg-white/80 dark:bg-black/30 text-black dark:text-white backdrop-blur-xl border border-zinc-300/40 dark:border-zinc-700/40 shadow-lg text-sm sm:text-base font-semibold leading-relaxed overflow-hidden"
                    >
                        {/* Blurred background with response text */}
                        <div className="absolute inset-0 bg-gradient-to-r from-bits-golden-yellow-500/10 to-bits-white/10 rounded-2xl blur-sm opacity-50 pointer-events-none" />

                        {/* Blurred response text in background */}
                        <div className="absolute inset-0 p-6 blur-md opacity-30 pointer-events-none">
                            {response}
                        </div>

                        {/* Overlay with register button */}
                        <div className="relative z-20 flex items-center justify-center min-h-[120px]">
                            <div className="text-center space-y-4">
                                <div className="text-lg font-bold text-gray-600 dark:text-gray-300">
                                    üîí Response Preview
                                </div>
                                <a
                                    href="/onboarding"
                                    className="inline-flex items-center space-x-2 px-6 py-3 text-sm font-semibold rounded-xl transition-all duration-200 shadow-lg bg-gradient-to-r from-bits-golden-yellow-500 to-bits-golden-yellow-600 hover:from-bits-golden-yellow-600 hover:to-bits-golden-yellow-700 text-white hover:shadow-bits-golden-yellow-500/30 hover:scale-105"
                                >
                                    <span>Register to View Response</span>
                                    <ArrowRight size={16} />
                                </a>
                                <div className="text-xs text-gray-500 dark:text-gray-400">
                                    Join BITS Pilani Dubai Campus to unlock full AI responses
                                </div>
                            </div>
                        </div>
                    </motion.div>

                    <motion.p
                        initial={{ opacity: 0, y: 5 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ delay: 0.3 }}
                        className="text-center text-zinc-300 dark:text-zinc-400 text-sm sm:text-base font-medium mt-4"
                    >
                        ‚ú® Want smarter results? <span className="text-bits-golden-yellow-400 font-semibold">Join BITS Pilani Dubai Campus</span> ‚Äî your AI-powered networking wingman üíºüöÄ
                    </motion.p>
                </>
            )}

        </motion.div>
    );
};
